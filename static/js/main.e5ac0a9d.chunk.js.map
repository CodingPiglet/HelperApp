{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["module","exports","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","player_names","people_names","room_names","weapon_names","Toggle","props","cellEntry","value","handleClick","bind","newState","this","setState","computed_id","row","num_players","player_num","style","height","width","onClick","id","info_type","React","Component","ClueRow","data","table_row_data","i","push","key","values","e","BuildDataCells","name","ClueInfo","rowname","current_info","num_objects","name_data","section_data","Fragment","renderClueTableRow","slice","className","Table","renderClueSection","num_people","people","num_weapons","weapons","num_rooms","rooms","Game","length","Array","fill","event","updated_people_info","updated_rooms_info","updated_weapons_info","update_type","target","update_cell","substring","current","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e5ac0a9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n//import ListGroup from 'react-native';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import {ListGroup} from 'react-bootstrap';\n// import {ButtonGroup} from 'react-bootstrap';\n// import {Button} from 'react-bootstrap';\nimport {Table} from 'react-bootstrap';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst number_of_players = 3;\nconst player_names = [\"Person 1\", \"Person 2\", \"Person 3\", \"Person 4\"];\n// const people_names = [\"Plum\", \"Orange\", \"Red\", \"Blue\", \"exotic color\", \"x\", \"y\"];\n// const room_names = [\"D\",\"B\",\"c\", \"E\", \"f\", \"g\", \"h\", \"z\", \"d\"];\n// const weapon_names = [\"F\",\"B\",\"c\", \"E\", \"f\", \"g\", \"h\", \"z\", \"d\"];\n\nconst people_names = [\"Peacock\", \"Mustard\", \"Green\", \"Plum\", \"Scarlet\", \"White\"];\nconst room_names =[\"Hall\", \"Lounge\", \"Dining Room\", \"Kitchen\", \"Ballroom\", \"Conservatory\", \"Billiard Room\", \"Library\",  \"Study\"];\nconst weapon_names = [\"Rope\",\"Candlestick\",\"Dagger\", \"Wrench\", \"Lead Pipe\", \"Revolver\"];\n\n\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {cellEntry: this.props.value}\n    //{isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    //this.props.current_info.knowledge.people[0]=this.state.cellEntry;\n    var newState = this.state;\n    newState.cellEntry = newState.cellEntry+1;\n    //this.props.people[0]= this.state.cellEntry;\n\n    // this.setState(prevState => ({\n    //   cellEntry: prevState.cellEntry+1\n    // }));\n    this.setState(newState)\n    // this.setState(this.stateUpdate());\n  }\n// from render  {this.state.isToggleOn ? this.props.value : 'OFF'}\n\n  render() {\n    var computed_id = this.props.row * this.props.num_players + this.props.player_num;\n    return (\n      <button style={{height: '30px', width : '100px'}} onClick={this.props.onClick} id={this.props.info_type[0] + computed_id} info_type={this.props.info_type}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\nfunction BuildDataCells(props) {\n  var table_row_data = [];\n  for (var i = 0; i < props.num_players; i++) {\n    // note: we are adding a key prop here to allow react to uniquely identify each\n    // element in this array. see: https://reactjs.org/docs/lists-and-keys.html\n    //this onclick doesn't do anything\n    table_row_data.push(<td key={i}>\n      <Toggle \n        value={props.values[i]} \n        info_type={props.info_type}\n        row={props.row}\n        player_num={i}\n        num_players={props.num_players}\n        onClick={(e) => props.onClick(e)}\n      />\n\n      {/* <button className=\"square\" onClick={handleClick}>\n      {props.values[i]}\n    </button> */}\n    </td>\n    );\n\n    \n  }\n\n  return table_row_data;\n\n}\n\nfunction ClueRow(props) {\n  var data = BuildDataCells(props)\n  return (\n    <tr>\n      <td>{props.name}</td>\n      {data}\n    </tr>\n  );\n}\n\nclass ClueInfo extends React.Component {\n  \n  renderClueTableRow(i, rowname, num_players, current_info, info_type) {\n//\n     const curr_row = <ClueRow\n        value={\"1\"} \n        values = {current_info}\n        onClick={(e) => this.props.onClick(e, info_type)}\n        name={rowname}\n        row={i}\n        info_type={info_type}\n        num_players={num_players}/>;\n    return curr_row;\n  }  \n\n  renderClueSection(info_type, num_players, num_objects, data){\n\n    var section_data = [];\n    var name_data;\n    if (info_type === \"people\") {\n      name_data = people_names;\n    }\n    else if (info_type === \"rooms\") {\n      name_data = room_names\n\n    } else if (info_type === \"weapons\"){\n      name_data = weapon_names;\n    }\n\n    for (var i = 0; i < num_objects; i++) {\n      section_data.push(\n        <React.Fragment key={i}>\n        {this.renderClueTableRow(i, name_data[i], num_players, data.slice(i*num_players,(i+1)*num_players), info_type)}\n        </React.Fragment>\n        )\n\n      }\n    return section_data;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"people-rows\">\n          <Table>\n            <thead>\n              <tr>\n                <th>People</th>\n                <th>{player_names[0]}</th>\n                <th>{player_names[1]}</th>\n                <th>{player_names[2]}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.renderClueSection(\"people\", this.props.state.num_players, this.props.state.num_people, this.props.state.people )}\n            </tbody>\n          </Table>\n        </div>\n        <div className=\"weapon-rows\">\n          <Table>\n            <thead>\n              <tr>\n                <th>Weapons</th>\n                <th>{player_names[0]}</th>\n                <th>{player_names[1]}</th>\n                <th>{player_names[2]}</th>\n              </tr>\n            </thead>\n            <tbody>\n            {this.renderClueSection(\"weapons\", this.props.state.num_players, this.props.state.num_weapons, this.props.state.weapons )}\n            </tbody>\n          </Table>\n        </div>\n        <div className=\"room-rows\">\n          <Table>\n            <thead>\n              <tr>\n                <th>Rooms</th>\n                <th>{player_names[0]}</th>\n                <th>{player_names[1]}</th>\n                <th>{player_names[2]}</th>\n              </tr>\n            </thead>\n            <tbody>\n            {this.renderClueSection(\"rooms\", this.props.state.num_players, this.props.state.num_rooms, this.props.state.rooms )}\n            {/* {this.renderClueSection(\"people\", this.props.state.num_players, this.props.state.num_people, this.props.state.people )} */}\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      num_players: 3,\n      num_weapons: weapon_names.length,\n      num_rooms: room_names.length,\n      num_people: people_names.length,\n      people: Array(people_names.length*number_of_players).fill(\" \"),\n      rooms: Array(room_names.length*number_of_players).fill(\" \"),\n      weapons: Array(weapon_names.length*number_of_players).fill(\" \"),\n\n    };\n  }\n\n  handleClick(event) {\n    var updated_people_info = this.state.people;\n    var updated_rooms_info = this.state.rooms;\n    var updated_weapons_info = this.state.weapons;\n    // const people = current.square.slice();\n    // if (calculateWinner(squares) || squares[i]) {\n    //   return;\n    // }\n    var update_type = event.target.id[0];\n    console.log(\"Clicked\");\n    console.log(event);\n\n    console.log(event.target.info_type);\n    var update_cell = event.target.id.substring(1);\n    console.log(update_cell);\n    // console.log(id); \n    if (update_type === \"p\") {\n\n      if (updated_people_info[update_cell] === \"X\")\n      {\n        updated_people_info[update_cell] = 3;\n      }\n      else \n      {\n        if (updated_people_info[update_cell] === \" \")\n        {\n          updated_people_info[update_cell] = \"?\";\n        }\n        else if (updated_people_info[update_cell] === \"?\")\n        {\n          updated_people_info[update_cell] = \"\\u2713\";\n        }\n        else if (updated_people_info[update_cell] === \"\\u2713\")\n        {\n          updated_people_info[update_cell] = \"\\u2717\";\n        }\n          else\n        {\n          updated_people_info[update_cell] = \" \";          \n        } \n\n      }\n      //updated_people_info = updated_people_info.fill(3);\n     } else if (update_type === \"r\"){\n        if (updated_rooms_info[update_cell] === \" \")\n        {\n          updated_rooms_info[update_cell] = \"?\";\n        }\n        else if (updated_rooms_info[update_cell] === \"?\")\n        {\n          updated_rooms_info[update_cell] = \"\\u2713\";\n        }\n        else if (updated_rooms_info[update_cell] === \"\\u2713\")\n        {\n          updated_rooms_info[update_cell] = \"\\u2717\";\n        }\n          else\n        {\n          updated_rooms_info[update_cell] = \" \";          \n        } \n     } else if (update_type === \"w\") {\n      if (updated_weapons_info[update_cell] === \" \")\n      {\n        updated_weapons_info[update_cell] = \"?\";\n      }\n      else if (updated_weapons_info[update_cell] === \"?\")\n      {\n        updated_weapons_info[update_cell] = \"\\u2713\";\n      }\n      else if (updated_weapons_info[update_cell] === \"\\u2713\")\n      {\n        updated_weapons_info[update_cell] = \"\\u2717\";\n      }\n        else\n      {\n        updated_weapons_info[update_cell] = \" \";          \n      } \n   }\n     else {\n       console.log(\"Unknown update\")\n     }\n\n\n    this.setState({\n      people: updated_people_info,\n      rooms: updated_rooms_info,\n      weapons: updated_weapons_info\n    });\n\n    }\n\n  render() {\n\n\n\n    const current = this.state;\n    // const weapon_known = false;\n    // const weapon_best_guess = \"Candlestick\"\n    // let weapon_status;\n    // if (weapon_known) {\n    //   weapon_status = \": \" + weapon_best_guess;\n    // } else {\n    //   weapon_status = \"Weapon Unknown\";\n    // }\n\n    return (\n      <div className=\"game\">\n\n        {/* New clue stuff starts here */}\n          <div className=\"cluesheet\">\n            <div className=\"clueboard\">\n              <ClueInfo\n                state={current}\n                onClick={i => this.handleClick(i)}\n                />\n            </div>\n          </div>\n        </div>\n\n    );\n  }\n}\n//onClick={}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nserviceWorkerRegistration.register();\n//serviceWorkerRegistration.unregister();\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}